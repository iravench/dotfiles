" don't bother with vi compatibility
set nocompatible

" enable syntax highlighting
syntax enable

" configure Vundle
filetype on " without this vim emits a zero exit status, later, because of :ft off
filetype off
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()

if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif

if filereadable(expand("~/.vimrc.bundles.local"))
  source ~/.vimrc.bundles.local
endif

call vundle#end()

" ensure ftdetect et al work by including this after the Vundle stuff
filetype plugin indent on

set autoindent
set autoread                                                 " reload files when changed on disk, i.e. via `git checkout`
set backspace=2                                              " Fix broken backspace in some setups
set clipboard=unnamed                                        " yank and paste with the system clipboard
set encoding=utf-8
set ignorecase                                               " case-insensitive search
set incsearch                                                " search as you type
set hlsearch                                                 " highlight matches
set laststatus=2                                             " always show statusline
set list                                                     " show trailing whitespace
set listchars=tab:▸\ ,trail:▫
set number                                                   " show line numbers
set ruler                                                    " show where you are
set cursorline                                               " highlight cursor line
set scrolloff=3                                              " show context above/below cursorline
set shiftwidth=2                                             " normal mode indentation commands use 2 spaces
set showcmd
set smartcase                                                " case-sensitive search if any caps
set tabstop=8                                                " actual tabs occupy 8 characters
set softtabstop=2                                            " insert mode tab and backspace use 2 spaces
set expandtab                                                " expand tabs to spaces
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmenu                                                 " show a navigable menu for tab completion
set wildmode=longest:full,full
set complete=.,w,b,u,t,i,kspell
set lazyredraw                                               " redraw only when need to - faster macros
set showmatch                                                " highlight matching

" Backup {{{
set backup
set backupcopy=yes                                           " see :help crontab
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup
" }}}

" put git status, column/row number, total lines, and percentage in status
set statusline=%F%m%r%h%w\ %{fugitive#statusline()}\ [%l,%c]\ [%L,%p%%]

" set colorscheme
set background=dark
colorscheme molokai

" set up some custom colors
highlight clear SignColumn
highlight VertSplit    ctermbg=236
highlight ColorColumn  ctermbg=237
highlight LineNr       ctermbg=236 ctermfg=240
highlight CursorLineNr ctermbg=236 ctermfg=240
highlight CursorLine   ctermbg=236
highlight StatusLineNC ctermbg=238 ctermfg=0
highlight StatusLine   ctermbg=235 ctermfg=2
highlight IncSearch    ctermbg=3   ctermfg=1
highlight Search       ctermbg=1   ctermfg=3
highlight Visual       ctermbg=3   ctermfg=0
highlight Pmenu        ctermbg=240 ctermfg=12
highlight PmenuSel     ctermbg=3   ctermfg=1
highlight SpellBad     ctermbg=0   ctermfg=1

" highlight the status bar when in insert mode
if version >= 700
  au InsertLeave * hi StatusLine ctermfg=235 ctermbg=2
  au InsertEnter * hi StatusLine ctermbg=240 ctermfg=12
endif

" Folding {{{
set foldenable                                               " enable fold
set foldlevelstart=10                                        " open most folds by default
set foldnestmax=10                                           " 10 nested fold max
set foldmethod=indent                                        " fold based on indent level
nnoremap <space> za
" }}}

" keyboard shortcuts
let mapleader = ','
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
nnoremap <leader>l :Align
nnoremap <leader>a :Ag!<space>
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>d :NERDTreeToggle<CR>
nnoremap <leader>f :NERDTreeFind<CR>
nnoremap <leader>t :TagbarToggle<CR>
nnoremap <leader><space> :call whitespace#strip_trailing()<CR>:nohlsearch<CR>
nnoremap <leader>g :GitGutterToggle<CR>
nnoremap <leader>u :GundoToggle<CR>
nnoremap <leader>sv :vsplit<CR>
nnoremap <leader>sh :split<CR>
nnoremap <leader>vp :VimuxPromptCommand<CR>
nnoremap <leader>vl :VimuxRunLastCommand<CR>
nnoremap <Leader>vi :VimuxInspectRunner<CR>
nnoremap <Leader>vz :VimuxZoomRunner<CR>
"nnoremap <leader>vp :call VimuxPromptCommand("run test")<CR>
" exec current line as shell command then replace it with the output
nnoremap <leader>cr !!$SHELL<CR>
" format current buffer as JSON
nnoremap <leader>fj :%!python -m json.tool<CR>
" format current buffer as XML
nnoremap <leader>fx :%!tidy -xml -i -q<CR>
noremap <silent> <leader>r :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" in case you forgot to sudo
cnoremap w!! %!sudo tee > /dev/null %

" plugin settings
let g:ctrlp_match_window = 'order:ttb,max:30'
let g:ctrlp_working_path_mode = 0
let g:NERDSpaceDelims = 1
let g:gitgutter_enabled = 1
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_pug_checkers = ['pug_lint']
let g:jsx_ext_required = 0

" set ctags binary for tagbar
let g:Tlist_Ctags_Cmd=system('print $(brew --prefix ctags-exuberant)"/bin/ctags"')

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use Ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s --files-with-matches --nocolor -g ""'
endif

" init ctrlp buffer delete plugin
call ctrlp_bdelete#init()

" fdoc is yaml
augroup filetype_yaml
  autocmd!
  autocmd BufRead,BufNewFile *.fdoc set filetype=yaml
augroup END

" md is markdown
augroup filetype_markdown
  autocmd!
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  autocmd BufRead,BufNewFile *.md set spell
augroup END

" jade is pug
augroup filetype_pug
  autocmd!
  autocmd BufRead,BufNewFile *.jade set filetype=pug
augroup END

" extra rails.vim help
augroup filetype_ruby
  autocmd!
  autocmd User Rails silent! Rnavcommand decorator      app/decorators            -glob=**/* -suffix=_decorator.rb
  autocmd User Rails silent! Rnavcommand observer       app/observers             -glob=**/* -suffix=_observer.rb
  autocmd User Rails silent! Rnavcommand feature        features                  -glob=**/* -suffix=.feature
  autocmd User Rails silent! Rnavcommand job            app/jobs                  -glob=**/* -suffix=_job.rb
  autocmd User Rails silent! Rnavcommand mediator       app/mediators             -glob=**/* -suffix=_mediator.rb
  autocmd User Rails silent! Rnavcommand stepdefinition features/step_definitions -glob=**/* -suffix=_steps.rb
augroup END

" automatically rebalance windows on vim resize
augroup utils
  autocmd!
  autocmd VimResized * :wincmd =
augroup END

" fugitive
augroup fugitive
  autocmd!
  autocmd BufReadPost fugitive://* set bufhidden=delete
augroup END

function! s:MkNonExDir(file, buf)
  if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
    let dir=fnamemodify(a:file, ':h')
    if !isdirectory(dir)
      call mkdir(dir, 'p')
    endif
  endif
endfunction

augroup BWCCreateDir
  autocmd!
  autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

" Fix Cursor in TMUX
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Don't copy the contents of an overwritten selection.
vnoremap p "_dP

if filereadable(expand("~/.vimrc.local"))
  " In your .vimrc.local, you might like to:
  "
  " set autowrite
  " set nocursorline
  " set nowritebackup
  " set whichwrap+=<,>,h,l,[,] " Wrap arrow keys between lines
  "
  " autocmd! bufwritepost .vimrc source ~/.vimrc
  " noremap! jj <ESC>
  source ~/.vimrc.local
endif

set modelines=1
" vim:foldmethod=marker:foldlevel=0
